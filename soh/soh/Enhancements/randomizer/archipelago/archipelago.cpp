#include "archipelago.h"

#include <algorithm>
#include <fstream>
#include <filesystem>
#include <optional>
#include <cmath>
#include <string>

#include <yaml-cpp/yaml.h>
#include <Cvar.h>

#include "../libultraship/libultraship/luslog.h"
#include "../libultraship/ImGuiImpl.h"
#include "soh/Enhancements/debugger/ImGuiHelpers.h"
#include "Lib/spdlog/include/spdlog/spdlog.h"

extern "C" {
    #include "z64.h"
    #include "macros.h"

    extern GlobalContext* gGlobalCtx;
}

namespace fs = std::filesystem;

extern std::unordered_map<std::string, RandomizerCheck> SpoilerfileCheckNameToEnum;

static std::optional<RandomizerCheck> currentCheck;

std::string ArchipelagoItemText() {
    return "\x1A\x13\x23\x08" "You got " "\x05\x41" "Aly's " "\x05\x42" "Kokiri Sword" "\x05\x40" "!" "\x02";
}

void SetArchipelagoCurrentCheckImpl(RandomizerCheck check, GetItemID getItemId) {
    if (std::abs(getItemId) == GI_ARCHIPELAGO_ITEM) {
        currentCheck = check;
    }
}

void GiveArchipelagoItemImpl() {
    if (!currentCheck) {
        lusprintf(__FILE__, __LINE__, 0, "Archipelago Check Params not set!\n");
        return;
    }

    RandomizerCheck check = *currentCheck;

    std::string checkName;
    for (const auto& [name, ch] : SpoilerfileCheckNameToEnum) {
        if (ch == check) {
            checkName = name;
            break;
        }
    }

    lusprintf(__FILE__, __LINE__, 0, "Archipelago Check Obtained: \"%s\"\n", checkName.c_str());

    currentCheck = {};
}

void DrawArchipelago(bool& open) {
    // ARCHIPELAGO_TODO: Add Archipelago window.
}

void InitArchipelago() {
    SohImGui::AddWindow("Randomizer", "Archipelago", DrawArchipelago);
}

void GenerateArchipelagoConfig(std::unordered_map<RandomizerSettingKey, u8> cvarSettings) {
    YAML::Emitter out;

    const char* game = "Shipwright";

    out << YAML::BeginMap;
    out << YAML::Key << game;
    out << YAML::BeginMap;
    {
        out << YAML::Key << "logic_rules";
        out << YAML::Value << "glitchless";
    }
    out << YAML::EndMap;

    out << YAML::Key << "description";
    out << YAML::Value << "Generated by https://github.com/Sirius902/Shipwright/tree/archipelago";
    out << YAML::Key << "game";
    out << YAML::Value << game;
    {
        out << YAML::Key << "name";
        // ARCHIPELAGO_TODO: Reject name if empty and display error to user.
        // Also figure out why there are carriage returns in the name cvar sometimes.
        std::string playerName = CVar_GetString("gArchipelagoName", "EmptyNameError");
        playerName.erase(std::remove(playerName.begin(), playerName.end(), '\r'), playerName.end());
        out << YAML::Value << playerName;
    }
    out << YAML::EndMap;

    // for (const auto& [k, v] : cvarSettings) {
    //     root[k] = v;
    // }

    fs::path configPath = "Archipelago/APsoh.yaml";
    fs::create_directory(configPath.parent_path());

    std::ofstream config{configPath};
    if (!config.is_open()) {
        SPDLOG_ERROR("({}) Failed to create Archipelago config.", configPath.string());
    }

    config << out.c_str();
}
